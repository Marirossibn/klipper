# This file serves as documentation for config parameters. One may
# copy and edit this file to configure a new printer.

# DO NOT COPY THIS FILE WITHOUT CAREFULLY READING AND UPDATING IT
# FIRST. Incorrectly configured parameters may cause damage.

# A note on pin names: pins may be configured with a hardware name
# (such as "PA4") or with an Arduino alias name (such as "ar29" or
# "analog3"). In order to use Arduino names, the pin_map variable in
# the mcu section must be present and have a value of "arduino".
# Pin names may be preceded by an '!' to indicate that a reverse
# polarity should be used (eg, trigger on low instead of high). Input
# pins may be preceded by a '^' to indicate that a hardware pull-up
# resistor should be enabled for the pin.


# The stepper_x section is used to describe the stepper controlling
# the X axis in a cartesian robot
[stepper_x]
step_pin: ar29
#   Step GPIO pin (triggered high)
dir_pin: !ar28
#   Direction GPIO pin (high indicates positive direction)
enable_pin: !ar25
#   Enable pin (default is enable high; use ! to indicate enable low)
step_distance: .0225
#   Distance in mm that each step causes the axis to travel
max_velocity: 500
#   Maximum velocity (in mm/s) of the stepper
max_accel: 3000
#   Maximum acceleration (in mm/s^2) of the stepper
endstop_pin: ^ar0
#   Endstop switch detection pin
homing_speed: 50.0
#   Maximum velocity (in mm/s) of the stepper when homing
homing_retract_dist: 5.0
#   Distance to backoff (in mm) before homing a second time during homing
homing_positive_dir: False
#   If true, homes in a positive direction (away from zero)
homing_stepper_phases: 0
#   One may optionally set this to the number of phases of the stepper
#   motor driver (which is the number of micro-steps multiplied by
#   four). When set, the phase of the stepper driver will be used
#   during homing to improve the accuracy of the endstop switch.
homing_endstop_accuracy: 0.200
#   Sets the expected accuracy (in mm) of the endstop. This represents
#   the maximum error distance the endstop may trigger (eg, if an
#   endstop may occasionally trigger 100um early or up to 100um late
#   then set this to 0.200 for 200um). This setting is used with
#   homing_stepper_phases and is only useful if that parameter is also
#   configured.
#homing_endstop_phase: 0
#   This specifies the phase of the stepper motor driver to expect
#   when hitting the endstop. This setting is only meaningful if
#   homing_stepper_phases is also set. Only set this value if one is
#   sure the stepper motor driver is reset every time the mcu is
#   reset. If this is not set, but homing_stepper_phases is set, then
#   the stepper phase will be detected on the first home and that
#   phase will be used on all subsequent homes.
position_min: -0.25
#   Minimum valid distance (in mm) the user may command the stepper to
#   move to
position_endstop: 0
#   Location of the endstop (in mm)
position_max: 200
#   Maximum valid distance (in mm) the user may command the stepper to
#   move to

# The stepper_y section is used to describe the stepper controlling
# the Y axis in a cartesian robot. It has the same settings as the
# stepper_x section
[stepper_y]
step_pin: ar27
dir_pin: ar26
enable_pin: !ar25
step_distance: .0225
max_velocity: 500
max_accel: 3000
endstop_pin: ^ar1
position_min: -0.25
position_endstop: 0
position_max: 200

# The stepper_z section is used to describe the stepper controlling
# the Z axis in a cartesian robot. It has the same settings as the
# stepper_x section
[stepper_z]
step_pin: ar23
dir_pin: !ar22
enable_pin: !ar25
step_distance: .005
max_velocity: 250
max_accel: 30
endstop_pin: ^ar2
position_min: 0.1
position_endstop: 0.5
position_max: 200

# The extruder section is used to describe both the stepper
# controlling the printer extruder and the heater parameters for the
# nozzle. The stepper configuration has the same settings as the
# stepper_x section and the heater configuration has the same settings
# as the heater_bed section
[extruder]
step_pin: ar19
dir_pin: ar18
enable_pin: !ar25
step_distance: .004242
max_velocity: 200000
max_accel: 3000
# The remaining variables describe the extruder heater
pressure_advance: 0.0
#   The amount of raw filament to push into the extruder during
#   extruder acceleration. An equal amount of filament is retracted
#   during deceleration. It is measured in millimeters per
#   millimeter/second
heater_pin: ar4
#   PWM output pin controlling the heater
thermistor_pin: analog1
#   Analog input pin connected to thermistor
thermistor_type: EPCOS 100K B57560G104F
#   Type of thermistor (see klippy/heater.py for available types)
pullup_resistor: 4700
#   The resistance (in ohms) of the pullup attached to the thermistor
control: pid
#   Control algorithm (either pid or watermark)
pid_Kp: 22.2
#   Kp is the "proportional" constant for the pid
pid_Ki: 1.08
#   Ki is the "integral" constant for the pid
pid_Kd: 114
#   Kd is the "derivative" constant for the pid
pid_deriv_time: 2.0
#   A time value (in seconds) over which the derivative in the pid
#   will be smoothed to reduce the impact of measurement noise
pid_integral_max: 255
#   The maximum "windup" the integral term may accumulate
min_extrude_temp: 170
#   The minimum temperature (in Celsius) at which extruder move
#   commands may be issued
min_temp: 0
#   Minimum temperature in Celsius (mcu will shutdown if not met)
max_temp: 210
#   Maximum temperature (mcu will shutdown if temperature is above
#   this value)

# The heater_bed section describes a heated bed (if present - omit
# section if not present).
[heater_bed]
heater_pin: ar3
thermistor_pin: analog0
thermistor_type: EPCOS 100K B57560G104F
control: watermark
max_delta: 2.0
#   The number of degrees in Celsius above the target temperature
#   before disabling the heater as well as the number of degrees below
#   the target before re-enabling the heater.
min_temp: 0
max_temp: 110

# Extruder print fan (omit section if fan not present)
[fan]
pin: ar14
#   PWM output pin controlling the heater
hard_pwm: 1
#   Set this value to force hardware PWM instead of software PWM. Set
#   to 1 to force a hardware PWM at the fastest rate; set to a higher
#   number (eg, 1024) to force hardware PWM with the given cycle time
#   in clock ticks.
kick_start_time: 0.100
#   Time (in seconds) to run the fan at full speed when first enabling
#   it (helps get the fan spinning)

# Micro-controller information
[mcu]
serial: /dev/ttyACM0
#   The serial port to connect to the MCU
baud: 250000
#   The baud rate to use
pin_map: arduino
#   This option may be used to enable Arduino pin name aliases
custom:
#   This option may be used to specify a set of custom
#   micro-controller commands to be sent at the start of the
#   connection. It may be used to configure the initial settings of
#   LEDs, to configure micro-stepping pins, to configure a digipot,
#   etc.

# The printer section controls high level printer settings
[printer]
kinematics: cartesian
#   This option must currently always be "cartesian"
motor_off_time: 60
#   Time (in seconds) of idle time before the printer will try to
#   disable active motors.
junction_deviation: 0.02
#   Distance (in mm) used to control the internal approximated
#   centripetal velocity cornering algorithm. A larger number will
#   permit higher "cornering speeds" at the junction of two moves.
